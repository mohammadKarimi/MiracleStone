// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments and CLS compliance
#pragma warning disable 1591, 3008, 3009
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;

[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
public static partial class MVC
{
    public static MiracleStone.Web.Controllers.CategoriesController Categories = new MiracleStone.Web.Controllers.T4MVC_CategoriesController();
    public static MiracleStone.Web.Controllers.DashboardController Dashboard = new MiracleStone.Web.Controllers.T4MVC_DashboardController();
    public static MiracleStone.Web.Controllers.GalleryController Gallery = new MiracleStone.Web.Controllers.T4MVC_GalleryController();
    public static MiracleStone.Web.Controllers.HomeController Home = new MiracleStone.Web.Controllers.T4MVC_HomeController();
    public static MiracleStone.Web.Controllers.ImageController Image = new MiracleStone.Web.Controllers.T4MVC_ImageController();
    public static MiracleStone.Web.Controllers.LayoutController Layout = new MiracleStone.Web.Controllers.T4MVC_LayoutController();
    public static MiracleStone.Web.Controllers.ProductController Product = new MiracleStone.Web.Controllers.T4MVC_ProductController();
    public static MiracleStone.Web.Controllers.ProjectController Project = new MiracleStone.Web.Controllers.T4MVC_ProjectController();
    public static T4MVC.SharedController Shared = new T4MVC.SharedController();
}

namespace T4MVC
{
}

namespace T4MVC
{
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class Dummy
    {
        private Dummy() { }
        public static Dummy Instance = new Dummy();
    }
}

[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
internal partial class T4MVC_System_Web_Mvc_ActionResult : System.Web.Mvc.ActionResult, IT4MVCActionResult
{
    public T4MVC_System_Web_Mvc_ActionResult(string area, string controller, string action, string protocol = null): base()
    {
        this.InitMVCT4Result(area, controller, action, protocol);
    }
     
    public override void ExecuteResult(System.Web.Mvc.ControllerContext context) { }
    
    public string Controller { get; set; }
    public string Action { get; set; }
    public string Protocol { get; set; }
    public RouteValueDictionary RouteValueDictionary { get; set; }
}
[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
internal partial class T4MVC_System_Web_Mvc_ViewResult : System.Web.Mvc.ViewResult, IT4MVCActionResult
{
    public T4MVC_System_Web_Mvc_ViewResult(string area, string controller, string action, string protocol = null): base()
    {
        this.InitMVCT4Result(area, controller, action, protocol);
    }
    
    public string Controller { get; set; }
    public string Action { get; set; }
    public string Protocol { get; set; }
    public RouteValueDictionary RouteValueDictionary { get; set; }
}
[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
internal partial class T4MVC_System_Web_Mvc_PartialViewResult : System.Web.Mvc.PartialViewResult, IT4MVCActionResult
{
    public T4MVC_System_Web_Mvc_PartialViewResult(string area, string controller, string action, string protocol = null): base()
    {
        this.InitMVCT4Result(area, controller, action, protocol);
    }
    
    public string Controller { get; set; }
    public string Action { get; set; }
    public string Protocol { get; set; }
    public RouteValueDictionary RouteValueDictionary { get; set; }
}
[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
internal partial class T4MVC_System_Web_Mvc_ContentResult : System.Web.Mvc.ContentResult, IT4MVCActionResult
{
    public T4MVC_System_Web_Mvc_ContentResult(string area, string controller, string action, string protocol = null): base()
    {
        this.InitMVCT4Result(area, controller, action, protocol);
    }
    
    public string Controller { get; set; }
    public string Action { get; set; }
    public string Protocol { get; set; }
    public RouteValueDictionary RouteValueDictionary { get; set; }
}
[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
internal partial class T4MVC_System_Web_Mvc_RedirectToRouteResult : System.Web.Mvc.RedirectToRouteResult, IT4MVCActionResult
{
    public T4MVC_System_Web_Mvc_RedirectToRouteResult(string area, string controller, string action, string protocol = null): base(default(System.Web.Routing.RouteValueDictionary))
    {
        this.InitMVCT4Result(area, controller, action, protocol);
    }
    
    public string Controller { get; set; }
    public string Action { get; set; }
    public string Protocol { get; set; }
    public RouteValueDictionary RouteValueDictionary { get; set; }
}



namespace Links
{
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static class Scripts {
        private const string URLPATH = "~/Scripts";
        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class JQuery {
            private const string URLPATH = "~/Scripts/JQuery";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class Ajax {
                private const string URLPATH = "~/Scripts/JQuery/Ajax";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string jquery_unobtrusive_ajax_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.unobtrusive-ajax.min.js") ? Url("jquery.unobtrusive-ajax.min.js") : Url("jquery.unobtrusive-ajax.js");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class Application {
                private const string URLPATH = "~/Scripts/JQuery/Application";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string main_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/main.min.js") ? Url("main.min.js") : Url("main.js");
            }
        
            public static readonly string bootstrap_min_js = Url("bootstrap.min.js");
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class Plugins {
                private const string URLPATH = "~/Scripts/JQuery/Plugins";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class AutoSlide {
                    private const string URLPATH = "~/Scripts/JQuery/Plugins/AutoSlide";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string owl_carousel_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/owl.carousel.min.js") ? Url("owl.carousel.min.js") : Url("owl.carousel.js");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class isotope {
                    private const string URLPATH = "~/Scripts/JQuery/Plugins/isotope";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string imagesloaded_min_js = Url("imagesloaded.min.js");
                    public static readonly string isotope_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/isotope.min.js") ? Url("isotope.min.js") : Url("isotope.js");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class Menu {
                    private const string URLPATH = "~/Scripts/JQuery/Plugins/Menu";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string mgmenu_min_js = Url("mgmenu.min.js");
                    public static readonly string mgmenu_plugins_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/mgmenu_plugins.min.js") ? Url("mgmenu_plugins.min.js") : Url("mgmenu_plugins.js");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class PlUpload {
                    private const string URLPATH = "~/Scripts/JQuery/Plugins/PlUpload";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string fa_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/fa.min.js") ? Url("fa.min.js") : Url("fa.js");
                    public static readonly string jquery_plupload_queue_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.plupload.queue.min.js") ? Url("jquery.plupload.queue.min.js") : Url("jquery.plupload.queue.js");
                    public static readonly string plupload_full_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/plupload.full.min.js") ? Url("plupload.full.min.js") : Url("plupload.full.js");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class popup {
                    private const string URLPATH = "~/Scripts/JQuery/Plugins/popup";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string jquery_magnific_popup_min_js = Url("jquery.magnific-popup.min.js");
                }
            
                public static readonly string redactor_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/redactor.min.js") ? Url("redactor.min.js") : Url("redactor.js");
                public static readonly string video_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/video.min.js") ? Url("video.min.js") : Url("video.js");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class v1 {
                private const string URLPATH = "~/Scripts/JQuery/v1";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string jquery_1_10_2_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery-1.10.2.min.js") ? Url("jquery-1.10.2.min.js") : Url("jquery-1.10.2.js");
                public static readonly string jquery_1_10_2_min_js = Url("jquery-1.10.2.min.js");
                public static readonly string jquery_1_10_2_min_map = Url("jquery-1.10.2.min.map");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class Validation {
                private const string URLPATH = "~/Scripts/JQuery/Validation";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string jquery_validate_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.validate.min.js") ? Url("jquery.validate.min.js") : Url("jquery.validate.js");
                public static readonly string jquery_validate_unobtrusive_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.validate.unobtrusive.min.js") ? Url("jquery.validate.unobtrusive.min.js") : Url("jquery.validate.unobtrusive.js");
                public static readonly string messages_fa_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/messages_fa.min.js") ? Url("messages_fa.min.js") : Url("messages_fa.js");
                public static readonly string NationalCodeValidate_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/NationalCodeValidate.min.js") ? Url("NationalCodeValidate.min.js") : Url("NationalCodeValidate.js");
            }
        
        }
    
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static class Content {
        private const string URLPATH = "~/Content";
        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class Css {
            private const string URLPATH = "~/Content/Css";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string animation_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/animation.min.css") ? Url("animation.min.css") : Url("animation.css");
                 
            public static readonly string authenty_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/authenty.min.css") ? Url("authenty.min.css") : Url("authenty.css");
                 
            public static readonly string bootstrap_min_css = Url("bootstrap.min.css");
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class Fonts {
                private const string URLPATH = "~/Content/Css/Fonts";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string font_awesome_min_css = Url("font-awesome.min.css");
                public static readonly string fontawesome_webfont__1__eot = Url("fontawesome-webfont (1).eot");
                public static readonly string fontawesome_webfont_eot = Url("fontawesome-webfont.eot");
                public static readonly string fontawesome_webfont_ttf = Url("fontawesome-webfont.ttf");
                public static readonly string fontawesome_webfont_woff = Url("fontawesome-webfont.woff");
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class VideoPlayer {
                    private const string URLPATH = "~/Content/Css/Fonts/VideoPlayer";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string vjs_eot = Url("vjs.eot");
                    public static readonly string vjs_svg = Url("vjs.svg");
                    public static readonly string vjs_ttf = Url("vjs.ttf");
                    public static readonly string vjs_woff = Url("vjs.woff");
                }
            
            }
        
            public static readonly string GridView_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/GridView.min.css") ? Url("GridView.min.css") : Url("GridView.css");
                 
            public static readonly string magnific_popup_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/magnific-popup.min.css") ? Url("magnific-popup.min.css") : Url("magnific-popup.css");
                 
            public static readonly string owl_carousel_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/owl.carousel.min.css") ? Url("owl.carousel.min.css") : Url("owl.carousel.css");
                 
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class PlUpload {
                private const string URLPATH = "~/Content/Css/PlUpload";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string jquery_plupload_queue_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.plupload.queue.min.css") ? Url("jquery.plupload.queue.min.css") : Url("jquery.plupload.queue.css");
                     
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class RedActor {
                private const string URLPATH = "~/Content/Css/RedActor";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string redactor_8_2_2_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/redactor-8-2-2.min.css") ? Url("redactor-8-2-2.min.css") : Url("redactor-8-2-2.css");
                     
                public static readonly string redactor_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/redactor.min.css") ? Url("redactor.min.css") : Url("redactor.css");
                     
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class Template {
                private const string URLPATH = "~/Content/Css/Template";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string custom_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/custom.min.css") ? Url("custom.min.css") : Url("custom.css");
                     
                public static readonly string magnific_popup_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/magnific-popup.min.css") ? Url("magnific-popup.min.css") : Url("magnific-popup.css");
                     
                public static readonly string mgmenu_min_css = Url("mgmenu.min.css");
                public static readonly string owl_carousel_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/owl.carousel.min.css") ? Url("owl.carousel.min.css") : Url("owl.carousel.css");
                     
                public static readonly string skin_lblue_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/skin-lblue.min.css") ? Url("skin-lblue.min.css") : Url("skin-lblue.css");
                     
                public static readonly string style_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/style.min.css") ? Url("style.min.css") : Url("style.css");
                     
            }
        
            public static readonly string video_js_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/video-js.min.css") ? Url("video-js.min.css") : Url("video-js.css");
                 
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class Image {
            private const string URLPATH = "~/Content/Image";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class Company {
                private const string URLPATH = "~/Content/Image/Company";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string about_office_1_jpg = Url("about-office-1.jpg");
                public static readonly string about_office_2_jpg = Url("about-office-2.jpg");
                public static readonly string about_office_3_jpg = Url("about-office-3.jpg");
                public static readonly string logo_alfa_png = Url("logo-alfa.png");
                public static readonly string logo_jpg = Url("logo.jpg");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class Divder {
                private const string URLPATH = "~/Content/Image/Divder";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string divder1_png = Url("divder1.png");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class PlUpload {
                private const string URLPATH = "~/Content/Image/PlUpload";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string backgrounds_gif = Url("backgrounds.gif");
                public static readonly string buttons_disabled_png = Url("buttons-disabled.png");
                public static readonly string buttons_png = Url("buttons.png");
                public static readonly string delete_gif = Url("delete.gif");
                public static readonly string done_gif = Url("done.gif");
                public static readonly string error_gif = Url("error.gif");
                public static readonly string throbber_gif = Url("throbber.gif");
                public static readonly string transp50_png = Url("transp50.png");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class VideoPlayer {
                private const string URLPATH = "~/Content/Image/VideoPlayer";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            }
        
        }
    
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static partial class Bundles
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static partial class Scripts {}
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static partial class Styles {}
    }
}

[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
internal static class T4MVCHelpers {
    // You can change the ProcessVirtualPath method to modify the path that gets returned to the client.
    // e.g. you can prepend a domain, or append a query string:
    //      return "http://localhost" + path + "?foo=bar";
    private static string ProcessVirtualPathDefault(string virtualPath) {
        // The path that comes in starts with ~/ and must first be made absolute
        string path = VirtualPathUtility.ToAbsolute(virtualPath);
        
        // Add your own modifications here before returning the path
        return path;
    }

    // Calling ProcessVirtualPath through delegate to allow it to be replaced for unit testing
    public static Func<string, string> ProcessVirtualPath = ProcessVirtualPathDefault;

    // Calling T4Extension.TimestampString through delegate to allow it to be replaced for unit testing and other purposes
    public static Func<string, string> TimestampString = System.Web.Mvc.T4Extensions.TimestampString;

    // Logic to determine if the app is running in production or dev environment
    public static bool IsProduction() { 
        return (HttpContext.Current != null && !HttpContext.Current.IsDebuggingEnabled); 
    }
}





#endregion T4MVC
#pragma warning restore 1591, 3008, 3009


